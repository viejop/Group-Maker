import random

students = [
    "marcos", "aidan", "shahood", "ryan", "muntag", "chris", "mason", "leo", "nathan", "gavin", "jaiden", "daybean",
    "asher", "supabigsteve", "sean", "antonio", "carrell", "jackson", "jacob", "chu"
]

restrictions = set()

print("Available students:", students, "\n")

userinput = input("Enter how many students will be in each group (2, 3, or 4): ")

while True:
    if userinput in ['2', '3', '4']:
        
        print("You can add up to 2 pairs of students who can't work together")
        qstinput = input("Do you want restrictions for students who can't work together? (y/n) \n")

        restriction_count = 0
        while qstinput == 'y' and restriction_count < 2:
            rst1input = input("Enter the name of the first student: ")
            CAPrstinput1 = rst1input.capitalize()
            rst2input = input("Enter the name of the student that can't work with " +CAPrstinput1+ ": ")
            CAPrstinput2 = rst2input.capitalize()

            restrictions.add((CAPrstinput1, CAPrstinput2))
            print("Restriction added: " +CAPrstinput1+ " and "+CAPrstinput2+ " can't work together")
            restriction_count += 1

            if restriction_count < 2:
                qstinput = input("Do you want to add another restriction? (y/n) \n")
            else:
                print("No more justice for you.")

        break
    else:
        print("Please enter groups of either 2, 3, or 4")
        userinput = input("Enter how many students will be in each group (2, 3, or 4): ")

random.shuffle(students)

def create_groups(students, group_size, restrictions):
    groups = []
    while len(students) >= group_size:
        group = students[:group_size]
        students = students[group_size:]

        while any(pair in restrictions or (pair[1], pair[0]) in restrictions for pair in [(group[i], group[j]) for i in range(len(group)) for j in range(i+1, len(group))]):
            random.shuffle(students)
            group = students[:group_size]
            students = students[group_size:]

        groups.append(group)

    if len(students) > 0:
        groups.append(students)

    return groups

group_size = int(userinput)
groups = create_groups(students, group_size, restrictions)

print("\nThe groups are:")
for i, group in enumerate(groups):
    print(f"Group {i+1}: {group}")
